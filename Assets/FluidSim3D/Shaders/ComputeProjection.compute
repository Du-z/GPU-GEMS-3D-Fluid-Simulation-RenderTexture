
#pragma kernel CSMain
#define NUM_THREADS 8

float4 _Size;

RWTexture3D<float3> _Write;
Texture3D<float> _Pressure, _Obstacles;
Texture3D<float3> _Velocity;

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void CSMain (int3 id : SV_DispatchThreadID)
{

	if(_Obstacles[id] > 0.1)
	{
		 _Write[id] = float3(0,0,0);
		 return;
	}

    int3 idxL = int3(max(0, id.x-1), id.y, id.z);
    int3 idxR = int3(min(_Size.x-1, id.x+1), id.y, id.z);
    
    int3 idxB = int3(id.x, max(0, id.y-1), id.z);
    int3 idxT = int3(id.x, min(_Size.y-1, id.y+1), id.z);
    
    int3 idxD = int3(id.x, id.y, max(0, id.z-1));
    int3 idxU = int3(id.x, id.y, min(_Size.z-1, id.z+1));
    
	float L = _Pressure[ idxL ];
    float R = _Pressure[ idxR ];
    
    float B = _Pressure[ idxB ];
    float T = _Pressure[ idxT ];
    
    float D = _Pressure[ idxD ];
    float U = _Pressure[ idxU ];
    
    float C = _Pressure[id];
    
    float3 mask = float3(1,1,1);
    
    if(_Obstacles[idxL] > 0.1) { L = C; mask.x = 0; }
    if(_Obstacles[idxR] > 0.1) { R = C; mask.x = 0; }
    
    if(_Obstacles[idxB] > 0.1) { B = C; mask.y = 0; }
    if(_Obstacles[idxT] > 0.1) { T = C; mask.y = 0; }
    
    if(_Obstacles[idxD] > 0.1) { D = C; mask.z = 0; }
    if(_Obstacles[idxU] > 0.1) { U = C; mask.z = 0; }
    
    float3 v = _Velocity[id] - float3( R - L, T - B, U - D ) * 0.5;
    
    _Write[id] = v * mask;
}




















