
#define NUM_THREADS 8


float4 _Size;
float _DeltaTime, _Dissipate, _Decay, _Forward;

Texture3D<float3> _Velocity;
Texture3D<float> _Obstacles;

RWTexture3D<float> _Write1f;
Texture3D<float> _Read1f;

RWTexture3D<float3> _Write3f;
Texture3D<float3> _Read3f;

Texture3D<float> _Phi_n_1_hat, _Phi_n_hat;

SamplerState _LinearClamp;


float3 GetAdvectedUV(int3 id)
{
	float w = _Size.x;
    float h = _Size.y;
    float d = _Size.z;
	
    float3 px = float3(1.0 / w, 1.0 / h, 1.0 / d);
    float3 uv = float3(id.x / w, id.y / h, id.z / d) + px * 0.5;
	
	float3 pos = id;
    pos -= _DeltaTime * _Forward * _Velocity.SampleLevel(_LinearClamp, uv, 0);
    return pos / _Size.xyz + px * 0.5;
}

#pragma kernel AdvectVelocity

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void AdvectVelocity(uint3 id : SV_DispatchThreadID)
{

	if(_Obstacles[id] > 0.1)
	{
		 _Write3f[id] = float3(0,0,0);
		 return;
	}

	float3 uv = GetAdvectedUV(id);
			
   	_Write3f[id] = _Read3f.SampleLevel(_LinearClamp, uv, 0) * _Dissipate;
   	
}

#pragma kernel Advect

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void Advect(uint3 id : SV_DispatchThreadID)
{
	
	if(_Obstacles[id] > 0.1)
	{
		 _Write1f[id] = 0;
		 return;
	}

	float3 uv = GetAdvectedUV(id);
			
   	_Write1f[id] = max(0, _Read1f.SampleLevel(_LinearClamp, uv, 0) * _Dissipate - _Decay);

}

#pragma kernel AdvectBFECC

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void AdvectBFECC(uint3 id : SV_DispatchThreadID)
{
	
	if(_Obstacles[id] > 0.1)
	{
		 _Write1f[id] = 0;
		 return;
	}
	
	float3 uv = GetAdvectedUV(id);
	
	float r;
	float4 halfVolumeDim = _Size/2;
    float3 diff = abs( halfVolumeDim.xyz - id );

    // Must use regular semi-Lagrangian advection instead of BFECC at the volume boundaries
    if( (diff.x > (halfVolumeDim.x-4)) || (diff.y > (halfVolumeDim.y-4)) || (diff.z > (halfVolumeDim.z-4)) )
    {
       r = _Read1f.SampleLevel(_LinearClamp, uv, 0);
    }
    else
    {
        r = 1.5f * _Read1f.SampleLevel(_LinearClamp, uv, 0) - 0.5f * _Phi_n_hat.SampleLevel(_LinearClamp, uv, 0);
    }
    
   	_Write1f[id] = max(0, r * _Dissipate - _Decay);
   	
}

#pragma kernel AdvectMacCormack

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void AdvectMacCormack(int3 id : SV_DispatchThreadID)
{
	
	if(_Obstacles[id] > 0.1)
	{
		 _Write1f[id] = 0;
		 return;
	}
	
	float3 uv = GetAdvectedUV(id);
	
	float r;
	float4 halfVolumeDim = _Size/2;
    float3 diff = abs( halfVolumeDim.xyz - id );

    // Must use regular semi-Lagrangian advection instead of MacCormack at the volume boundaries
    if( (diff.x > (halfVolumeDim.x-4)) || (diff.y > (halfVolumeDim.y-4)) || (diff.z > (halfVolumeDim.z-4)) )
    {
       r = _Read1f.SampleLevel(_LinearClamp, uv, 0);
    }
    else
    {
        int3 idx0 = int3(id.x-1, id.y-1, id.z-1);
	    int3 idx1 = int3(id.x-1, id.y-1, id.z+1);
	    
        int3 idx2 = int3(id.x-1, id.y+1, id.z-1);
	    int3 idx3 = int3(id.x-1, id.y+1, id.z+1);
	    
        int3 idx4 = int3(id.x+1, id.y-1, id.z-1);
	    int3 idx5 = int3(id.x+1, id.y-1, id.z+1);
	    
        int3 idx6 = int3(id.x+1, id.y+1, id.z-1);
	    int3 idx7 = int3(id.x+1, id.y+1, id.z+1);
	           
	    float nodes[8];
		nodes[0] = _Read1f[ idx0 ];
	    nodes[1] = _Read1f[ idx1 ];
	    
	    nodes[2] = _Read1f[ idx2 ];
	    nodes[3] = _Read1f[ idx3 ];
	    
	    nodes[4] = _Read1f[ idx4 ];
	    nodes[5] = _Read1f[ idx5 ];
	    
	   	nodes[6] = _Read1f[ idx6 ];
	    nodes[7] = _Read1f[ idx7 ];
	    
	    float minPhi = min(min(min(min(min(min(min(nodes[0],nodes[1]),nodes[2]),nodes[3]),nodes[4]),nodes[5]),nodes[6]),nodes[7]);
	    
	    float maxPhi = max(max(max(max(max(max(max(nodes[0],nodes[1]),nodes[2]),nodes[3]),nodes[4]),nodes[5]),nodes[6]),nodes[7]);
   
        r =  _Phi_n_1_hat.SampleLevel(_LinearClamp, uv, 0) + 0.5f * (_Read1f[id] - _Phi_n_hat[id]);
        
        r = max(min(r, maxPhi), minPhi);
    }
    
   	_Write1f[id] = max(0, r * _Dissipate - _Decay);
   	
}




















