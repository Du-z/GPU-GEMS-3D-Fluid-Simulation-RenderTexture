
#pragma kernel CSMain
#define NUM_THREADS 8

float4 _Size;

RWTexture3D<float3> _Write;
Texture3D<float3> _Velocity;
Texture3D<float> _Obstacles;

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void CSMain (int3 id : SV_DispatchThreadID)
{

    int3 idxL = int3(max(0, id.x-1), id.y, id.z);
    int3 idxR = int3(min(_Size.x-1, id.x+1), id.y, id.z);
    
    int3 idxB = int3(id.x, max(0, id.y-1), id.z);
    int3 idxT = int3(id.x, min(_Size.y-1, id.y+1), id.z);
    
    int3 idxD = int3(id.x, id.y, max(0, id.z-1));
    int3 idxU = int3(id.x, id.y, min(_Size.z-1, id.z+1));
    
	float3 L = _Velocity[ idxL ];
    float3 R = _Velocity[ idxR ];
    
    float3 B = _Velocity[ idxB ];
    float3 T = _Velocity[ idxT ];
    
    float3 D = _Velocity[ idxD ];
    float3 U = _Velocity[ idxU ];
    
    float3 obstacleVelocity = float3(0,0,0);
    
    if(_Obstacles[idxL] > 0.1) L = obstacleVelocity;
    if(_Obstacles[idxR] > 0.1) R = obstacleVelocity;
    
    if(_Obstacles[idxB] > 0.1) B = obstacleVelocity;
    if(_Obstacles[idxT] > 0.1) T = obstacleVelocity;
    
    if(_Obstacles[idxD] > 0.1) D = obstacleVelocity;
    if(_Obstacles[idxU] > 0.1) U = obstacleVelocity;
    
    float divergence =  0.5 * ( ( R.x - L.x ) + ( T.y - B.y ) + ( U.z - D.z ) );
    
    _Write[id] = float3(divergence,0,0);
}
